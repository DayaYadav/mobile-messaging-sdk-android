plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'maven'
    id 'idea'
}

group 'org.infobip.mobile.messaging.api'
version '1.0.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

shadowJar {
    classifier = ''
    zip64 = true
    relocate 'com.google.gson', 'org.infobip.mobile.messaging.api.shaded.google.gson'
    manifest {
        attributes("Implementation-Title": "Gradle", "Implementation-Version": version)
    }
}

jar {
    classifier = 'non_shaded'
}

jar.dependsOn(shadowJar)

artifacts {
    archives shadowJar
}

configurations {
    provided
}

sourceSets {
    main { compileClasspath += configurations.provided }
    test { compileClasspath += configurations.provided }
}

idea {
    module {
        try {
            scopes.PROVIDED.plus += [project.configurations.provided]

            //scopes.PROVIDED.plus += project.configurations.provided.compile
            //scopes.PROVIDED.plus += project.configurations.provided.runtime
            //scopes.COMPILE.minus += project.configurations.provided.compile
            //scopes.RUNTIME.minus += project.configurations.provided.runtime
        } catch (NullPointerException e) {
            println ":${project.name} ${e}"
        }
    }
}

def repo = version.endsWith('SNAPSHOT') ? 'libs-snapshot-local' : 'libs-release-local'

artifactory {
    contextUrl = "${project.getProperty('artifactory.publish.contextUrl')}"
    publish {
        repository {
            repoKey = repo
            username = "${project.getProperty('artifactory.publish.username')}"
            password = "${project.getProperty('artifactory.publish.password')}"
            maven = true

        }
    }
    resolve {
        repository {
            repoKey = 'repo'
            username = "${project.getProperty('artifactory.publish.username')}"
            password = "${project.getProperty('artifactory.publish.password')}"
            maven = true
        }
    }
}

/*
System.getenv('HOME')
def artifactoryUsername = project.hasProperty('artifactoryUsername') ? project['artifactoryUsername'] : ''
def artifactoryPassword = project.hasProperty('artifactoryPassword') ? project['artifactoryPassword'] : ''

uploadArchives {
    configuration = configurations.archives

    repositories {
        mavenDeployer {

            repository(url: 'http://ci-server.infobip.local/artifactory/libs-release-local') {
                authentication(userName: artifactoryUsername, password: artifactoryPassword)
            }

            snapshotRepository(url: 'http://ci-server.infobip.local/artifactory/libs-snapshot-local') {
                authentication(userName: artifactoryUsername, password: artifactoryPassword)
            }

            pom.project {
                name 'infobip-mobile-messaging-api-java'
                description 'Infobip Mobile Messaging API for Java'

                scm {
                    developerConnection 'scm:git:ssh://git@git.infobip.local:7999/mml/infobip-mobile-messaging-android.git'
                }
            }
        }
    }
}

task checkProperties << {
    if (!artifactoryUsername) {
        throw new RuntimeException("Couldn't find artifactoryUsername property. Did you forget to specify it in ~/.gradle/gradle.properties?")
    } else if (!artifactoryPassword) {
        throw new RuntimeException("Couldn't find artifactoryPassword property. Did you forget to specify it in ~/.gradle/gradle.properties?")
    }
}

uploadArchives.dependsOn(checkProperties)
*/

dependencies {
    compile group: 'com.google.code.gson', name: 'gson', version: '2.6.2'

    provided group: 'org.projectlombok', name: 'lombok', version: '1.16.8'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '2.3.0'
    testCompile group: 'com.nanohttpd', name: 'nanohttpd', version: '2.1.0'
}


