package org.infobip.mobile.messaging.geo;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.location.LocationManager;

import org.infobip.mobile.messaging.MobileMessagingCore;
import org.infobip.mobile.messaging.MobileMessagingLogger;

/**
 * Created by tjuric on 20/02/17.
 */
public class GeofencingConsistencyReceiver extends BroadcastReceiver {

    public static final String NETWORK_PROVIDER_ENABLED_ACTION = "org.infobip.mobile.messaging.geo.intent.NETWORK_PROVIDER_ENABLED";
    public static final String SCHEDULED_GEO_REFRESH_ACTION = "org.infobip.mobile.messaging.geo.intent.SCHEDULED_GEO_REFRESH";

    @Override
    public void onReceive(final Context context, final Intent intent) {
        String action = intent.getAction();
        if (action != null) {
            MobileMessagingLogger.i(String.format("[%s]", action));

            switch (action) {
                /**
                 * This action gets called when GPS or network provider changes it's state. Redundancy in switching GPS only while network available.
                 *
                 * If the network provider is enabled, local alarm for adding geo areas is scheduled on GeofencingConsistencyReceiver class in 15 seconds.
                 * This alarm is necessary because there is a lag in the time that the end user clicks on "Google location services" in settings and accepts it's usage (depends on Android version).
                 *
                 * From Google's documentation of #addGeofences method:
                 * In case network location provider is disabled by the user, the geofence service will stop updating, all registered geofences will
                 * be removed and an intent is generated by the provided pending intent.
                 */
                case LocationManager.PROVIDERS_CHANGED_ACTION:
                    final LocationManager lm = (LocationManager) context.getSystemService(Service.LOCATION_SERVICE);
                    if (lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
                        final AlarmManager mgr = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
                        final Intent locationSendingIntent = new Intent(context, GeofencingConsistencyReceiver.class);
                        locationSendingIntent.setAction(NETWORK_PROVIDER_ENABLED_ACTION);
                        final PendingIntent pi = PendingIntent.getBroadcast(context, 0, locationSendingIntent, 0);
                        mgr.set(AlarmManager.RTC, System.currentTimeMillis() + 15 * 1000, pi);
                    }
                    break;

                /**
                 * NETWORK_PROVIDER_ENABLED_ACTION - scheduled 15 seconds after NETWORK_PROVIDER is enabled. Starts monitoring geofences from storage if geo is enabled.
                 * SCHEDULED_GEO_REFRESH_ACTION - scheduled to start after geofence expires
                 */
                case NETWORK_PROVIDER_ENABLED_ACTION:
                case SCHEDULED_GEO_REFRESH_ACTION:
                    MobileMessagingCore.getInstance(context).startGeoMonitoringIfNecessary();
                    break;
            }
        }
    }
}