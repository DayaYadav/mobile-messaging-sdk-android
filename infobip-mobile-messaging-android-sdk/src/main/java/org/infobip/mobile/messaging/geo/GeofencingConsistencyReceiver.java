package org.infobip.mobile.messaging.geo;

import android.app.AlarmManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.location.LocationManager;
import android.net.Uri;
import android.support.v4.content.WakefulBroadcastReceiver;

import com.google.android.gms.common.GoogleApiAvailability;

import org.infobip.mobile.messaging.MobileMessagingCore;
import org.infobip.mobile.messaging.MobileMessagingLogger;
import org.infobip.mobile.messaging.platform.Time;

import java.util.Date;

/**
 * Created by tjuric on 20/02/17.
 */
public class GeofencingConsistencyReceiver extends WakefulBroadcastReceiver {

    public static final String NETWORK_PROVIDER_ENABLED_ACTION = "org.infobip.mobile.messaging.geo.intent.NETWORK_PROVIDER_ENABLED";
    public static final String SCHEDULED_GEO_REFRESH_ACTION = "org.infobip.mobile.messaging.geo.intent.SCHEDULED_GEO_REFRESH";
    public static final String SCHEDULED_GEO_EXPIRE_ACTION = "org.infobip.mobile.messaging.geo.intent.SCHEDULED_GEO_EXPIRE";

    @Override
    public void onReceive(final Context context, final Intent intent) {
        String action = intent.getAction();
        if (action != null) {
            MobileMessagingLogger.i(String.format("[%s]", action));
            final LocationManager lm = (LocationManager) context.getSystemService(Service.LOCATION_SERVICE);

            switch (action) {
                /**
                 * This action gets called when GPS or network provider changes it's state. Redundancy in switching GPS only while network available.
                 *
                 * If the network provider is enabled, local alarm for adding geo areas is scheduled on GeofencingConsistencyReceiver class in 15 seconds.
                 * This alarm is necessary because there is a lag in the time that the end user clicks on "Google location services" in settings and accepts it's usage (depends on Android version).
                 *
                 * From Google's documentation of #addGeofences method:
                 * In case network location provider is disabled by the user, the geofence service will stop updating, all registered geofences will
                 * be removed and an intent is generated by the provided pending intent.
                 */
                case LocationManager.PROVIDERS_CHANGED_ACTION:
                    if (lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
                        Date triggerDate = new Date(Time.now() + 15 * 1000);
                        scheduleConsistencyAlarm(context, AlarmManager.RTC, triggerDate, NETWORK_PROVIDER_ENABLED_ACTION, 0);
                    }
                    break;

                /**
                 * NETWORK_PROVIDER_ENABLED_ACTION - scheduled 15 seconds after NETWORK_PROVIDER is enabled. Starts monitoring geofences from storage if geo is enabled.
                 * SCHEDULED_GEO_REFRESH_ACTION - scheduled to start when campaign needs to be started and area monitored
                 */
                case NETWORK_PROVIDER_ENABLED_ACTION:
                case SCHEDULED_GEO_REFRESH_ACTION:
                    MobileMessagingCore.getInstance(context).setAllActiveGeoAreasMonitored(false);

                    if (lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
                        MobileMessagingCore.getInstance(context).startGeoMonitoringIfNecessary();
                    }
                    break;

                /**
                 * This action gets called whenever user deletes data from some app, and we're interested in clear Play Services cleared event
                 *  because all registered geofences stop being monitored by GPS in that case.
                 */
                case Intent.ACTION_PACKAGE_DATA_CLEARED:
                    Uri data = intent.getData();
                    if (data != null && GoogleApiAvailability.GOOGLE_PLAY_SERVICES_PACKAGE.equals(data.getSchemeSpecificPart())) {
                        //we want geo to start monitoring areas from scratch
                        MobileMessagingCore.getInstance(context).setAllActiveGeoAreasMonitored(false);

                        if (lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
                            MobileMessagingCore.getInstance(context).startGeoMonitoringIfNecessary();
                        }
                    }
                    break;

                /**
                 * Scheduled to be invoked when first area from geo storage needs to expire. In that case GPS stop monitoring areas, but we
                 *  also need to be aware of this event.
                 */
                case SCHEDULED_GEO_EXPIRE_ACTION:
                    MobileMessagingCore.getInstance(context).removeExpiredAreas();
                    break;
            }
        }
    }

    public static void scheduleConsistencyAlarm(Context context, int alarmType, Date when, String action, int flags) {
        if (when == null) {
            return;
        }

        AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
        Intent intent = new Intent(context, GeofencingConsistencyReceiver.class);
        intent.setAction(action);
        PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, intent, flags);
        alarmManager.set(alarmType, when.getTime(), pendingIntent);
    }
}