apply plugin: 'com.android.library'

android {
    compileSdkVersion mm_compileSdkVersion
    buildToolsVersion mm_buildToolsVersion

    defaultConfig {
        minSdkVersion mm_minSdkVersion
        targetSdkVersion mm_targetSdkVersion
        versionCode 1
        versionName project.version

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: "libs", include: ["*.jar"])

    compile "com.google.code.gson:gson:2.8.2"

    compile "com.android.support.test:runner:1.0.2"
    compile "com.crittercism.dexmaker:dexmaker-dx:1.4"
    compile "com.crittercism.dexmaker:dexmaker:1.4"
    compile "com.crittercism.dexmaker:dexmaker-mockito:1.4"
    compile "org.mockito:mockito-core:1.10.19"
    compile "junit:junit:4.12"
    compile "com.nanohttpd:nanohttpd:2.1.0"
    compile("org.skyscreamer:jsonassert:1.3.0") {
        exclude group: "org.json", module: "json"
    }
}
android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    def jar = project.tasks.create(name: "jar${name.capitalize()}", type: Jar) {
        dependsOn variant.javaCompiler
        from variant.javaCompiler.destinationDir

        manifest {
            attributes(
                    "Bundle-Name": 'parse-android',
                    "Bundle-Version": project.version
            )
        }

        exclude '**/R.class'
        exclude '**/R\$*.class'
        exclude '**/Manifest.class'
        exclude '**/Manifest\$*.class'
        exclude '**/BuildConfig.class'
    }

    artifacts {
        archives jar
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
